const Product = require('../models/Product');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
exports.getAllProducts = async (req, res) => {
  try {
    const products = await Product.find();
    const productsWithStringId = products.map(product => ({
      ...product.toObject(),
      id: product._id.toString(),
    }));
    res.json(productsWithStringId);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
exports.createProduct = async (req, res) => {
  const { name, price, photo, category, quantity } = req.body;

  try {
    const newProduct = new Product({
      name,
      price,
      photo,
      category,
      quantity, // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ quantity –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    });

    const product = await newProduct.save();
    res.json(product);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
exports.updateProduct = async (req, res) => {
  const { name, price, photo, category, quantity } = req.body;

  try {
    let product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ msg: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    product.name = name;
    product.price = price;
    product.photo = photo;
    product.category = category;
    if (quantity !== undefined) product.quantity = quantity;

    await product.save();
    res.json(product);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
exports.deleteProduct = async (req, res) => {
  try {
    let product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ msg: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await Product.deleteOne({ _id: req.params.id });

    res.json({ msg: '–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// üîß –ù–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä PATCH ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
exports.updateQuantity = async (req, res) => {
  const { quantity } = req.body;

  try {
    const product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ msg: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    product.quantity = quantity;
    await product.save();

    res.json(product);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};
